task HelloGroovy {
    hello()
    helloList()
    helloMap()
    helloCloser()
    helloIO()
    helloExecute()
}

static void testVariable(var) {
    printf("%s %s\n", var.getClass().getName().toString(), var)
}
static void hello() {
    def PI1 = 3.1415 // 自动推断类型
    final float PI2 = 3.1415
    testVariable(PI1)
    testVariable(PI2)

    // String
    def str1 = "["
    def str2 = ']'
    def str3 = "${str1}Hello${str2}"
    testVariable(str1)
    testVariable(str2)
    // 调用方法时可以省略括号
    testVariable str3

    // == is
    def l1 = []
    def l2 = []
    def l3 = l1
    printf("l1 == l2 ? %b\n", l1 == l2)
    printf("l1 is l2 ? %b\n", l1.is(l2))
    printf("l1 is l3 ? %b\n", l1.is(l3))
}
static void helloList() {
    def list = []
    testVariable(list)
    list << 50; list << 40; list << 30; list << 20; list << 10
    printf("List          :\t %s\n", list.toString())
    list.push(999); printf("List.push(999):\t %s\n", list.toString())
    list.add(666) ; printf("List.add(666) :\t %s\n", list.toString())
    list.pop();     printf("List.pop()    :\t %s\n", list.toString())
    list.remove(1); printf("List.remove(1):\t %s\n", list.toString())
    list = list.reverse()
    printf("List.reverse():\t %s\n", list.toString())
    printf("List.sort()   :\t %s\n", list.sort().toString())
    list.each {
        println "List.each: $it"
    }
    list.eachWithIndex{ def entry, int i ->
        println "List.eachWithIndex: $i $entry"
    }
    // Range
    def range1 = 5..8
    testVariable(range1)
    printf("Range1           : %s\n", ((ArrayList)range1).toString())
    printf("Range.from       : %s\n", range1.from)
    printf("Range.to         : %s\n", range1.to)
    printf("Range.contains(8): %s\n", range1.contains(8))
    def range2 = 5..<8
    printf("Range2           : %s\n", ((ArrayList)range2).toString())
    printf("Range.from       : %s\n", range2.from)
    printf("Range.to         : %s\n", range2.to)
    printf("Range.contains(8): %s\n", range2.contains(8))
}
static void helloMap() {
    // Map
    def map = [:]
    testVariable(map)
    map.Name = "Tomcat"
    map["Gender"] = "f"
    map.put("Age", 22)
    printf("Map                  :\t %s\n", map.toString())
    printf("Map.size()           :\t %s\n", map.size())
    printf("Map.containsKey('Id'):\t %s\n", map.containsKey("Id"))
    printf("Map.get('Name')      :\t %s\n", map.get("Name"))
    map.each { Map.Entry<Object, Object> entry ->
        println "Map.each: $entry.key = $entry.value"
    }
    map.eachWithIndex { Map.Entry<Object, Object> entry, int i ->
        println "Map.eachWithIndex: $i $entry.key = $entry.value"
    }
}
static void helloCloser() {
    // Closer
    def helloCloser = { println("This is a HelloCloser") }
    testVariable(helloCloser)
    helloCloser()
    def sumCloser = { a, b -> a + b }
    def mulCloser = { float a, float b -> return a * b }
    def sqrCloser = { double a ->
        def b = Math.sqrt(a)
        return b
    }
    println(sumCloser(1, 2))
    println(mulCloser(2, 3))
    println(sqrCloser(16))
}
static void helloIO() {
    // Writer
    new File("./.gradle", "test.txt").withWriter("utf-8") { writer ->
        writer.writeLine("First")
        writer.writeLine("Second")
        writer.writeLine("Third")
    }
    // Reader
    new File("./.gradle", "test.txt").withReader{ reader ->
        String line
        while (line = reader.readLine()) {
            println(line)
        }
    }
    //
    new File("./.gradle", "test.txt") << """>Hello
>Groovy"""
    new File("./.gradle", "test.txt").eachLine{ line ->
        println(line)
    }
    // 遍历文件（一层）
    println("Files: .")
    new File("./.gradle").eachFileMatch(~/.*/) { file ->
        printf("\t-%s\n", file.name)
    }
    // 遍历文件（深层）
    println("Files: .")
    new File("./.gradle").eachFileRecurse(groovy.io.FileType.FILES) { file ->
        printf("\t-%s\n", file.name)
    }
}
static void helloExecute() {
    def process = "echo ???".execute()
    println(process.text)
}
